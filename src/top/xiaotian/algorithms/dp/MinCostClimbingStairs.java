package top.xiaotian.algorithms.dp;

/**
 * 746. 使用最小花费爬楼梯
 * 给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
 * <p>
 * 你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。
 * <p>
 * 请你计算并返回达到楼梯顶部的最低花费。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：cost = [10,15,20]
 * 输出：15
 * 解释：你将从下标为 1 的台阶开始。
 * - 支付 15 ，向上爬两个台阶，到达楼梯顶部。
 * 总花费为 15 。
 * 示例 2：
 * <p>
 * 输入：cost = [1,100,1,1,1,100,1,1,100,1]
 * [1, 100, 2, 3, 3, 103, 4, 5, 104, 6]
 * 输出：6
 * 解释：你将从下标为 0 的台阶开始。
 * - 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
 * - 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
 * - 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
 * - 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
 * - 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
 * - 支付 1 ，向上爬一个台阶，到达楼梯顶部。
 * 总花费为 6 。
 * <p>
 * <p>
 * 提示：
 * <p>
 * 2 <= cost.length <= 1000
 * 0 <= cost[i] <= 999
 *
 * @see ClimbStairs
 */
public class MinCostClimbingStairs {

  /**
   *        10, 15, 20
   * 从0开始
   *        支付10，爬1阶
   *            支付15，爬1阶
   *                支付20，爬1阶    总花费45
   *        支付10，爬2阶
   *                支付20，爬1阶    总花费30
   * 从1开始
   *            支付15，爬1阶
   *                支付20，爬1阶    总花费35
   *            支付15，爬2阶        总花费15
   */
  public int minCostClimbingStairs(int[] cost) {
    int len = cost.length;
    // dp[i]记录爬到i下标时的最小花费
    // 爬到i阶台阶，有两种跳法  从i-1阶跳1阶 或者 从i-2阶跳2阶
    // dp[i]=Math.min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])
    int[] dp = new int[len + 1];
    // 初始化：可以从0或者1下标直接开始，最小花费都是0
    dp[0] = 0;
    dp[1] = 0;
    for (int i = 2; i <= len; i++) {
      dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
    }
    return dp[len];
  }
}
